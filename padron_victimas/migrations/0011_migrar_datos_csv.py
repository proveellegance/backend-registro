# Generated by Django on 2025-08-21

from django.db import migrations
from datetime import datetime
import re

def migrar_datos_csv_a_campos_estandar(apps, schema_editor):
    """
    Migra los datos de los campos CSV a los campos estándar del modelo
    """
    Victima = apps.get_model('padron_victimas', 'Victima')
    
    print(f"Iniciando migración de {Victima.objects.count()} víctimas...")
    
    victimas_actualizadas = 0
    
    for victima in Victima.objects.all():
        actualizado = False
        
        # 1. Migrar registro alfanumérico
        if victima.alfanumerica_registro and not victima.numero_registro:
            victima.numero_registro = victima.alfanumerica_registro
            actualizado = True
        
        # 2. Migrar nombre completo
        if victima.nombre_victima_csv and not victima.nombre:
            nombre_completo = victima.nombre_victima_csv.strip()
            if nombre_completo and nombre_completo != 'NA':
                # Extraer nombre y apellidos del campo completo
                partes_nombre = nombre_completo.split()
                if len(partes_nombre) >= 1:
                    victima.nombre = partes_nombre[0]
                    actualizado = True
                    
                if len(partes_nombre) >= 2:
                    victima.apellido_paterno = partes_nombre[1]
                    
                if len(partes_nombre) >= 3:
                    victima.apellido_materno = ' '.join(partes_nombre[2:])
            
        # 3. Migrar tipo de victimización
        if victima.tipo_delito_violacion_dh and not victima.tipo_victimizacion:
            tipo_delito = victima.tipo_delito_violacion_dh.strip()
            if tipo_delito and tipo_delito != 'NA':
                victima.tipo_victimizacion = tipo_delito
                actualizado = True
        
        # 4. Migrar CURP (solo si no es 'NA')
        if victima.curp_csv and not victima.curp:
            curp_csv = victima.curp_csv.strip()
            if curp_csv and curp_csv != 'NA':
                # Validar formato básico de CURP (18 caracteres)
                if len(curp_csv) == 18:
                    victima.curp = curp_csv.upper()
                    actualizado = True
        
        # 5. Migrar teléfono (solo si no es 'NA')
        if victima.telefono_csv and not victima.telefono:
            telefono_csv = victima.telefono_csv.strip()
            if telefono_csv and telefono_csv != 'NA':
                victima.telefono = telefono_csv
                actualizado = True
        
        # 6. Migrar email (solo si no es 'NA')
        if victima.correo_electronico_csv and not victima.email:
            email_csv = victima.correo_electronico_csv.strip()
            if email_csv and email_csv != 'NA' and '@' in email_csv:
                victima.email = email_csv
                actualizado = True
        
        # 7. Migrar fecha de registro (convertir de texto a datetime)
        if victima.fecha_registro_csv and hasattr(victima, 'fecha_registro_csv'):
            fecha_csv = victima.fecha_registro_csv.strip()
            if fecha_csv and fecha_csv != 'NA':
                try:
                    # Intentar varios formatos de fecha
                    formatos = ['%Y-%m-%d', '%d/%m/%Y', '%m/%d/%Y', '%Y-%m-%d %H:%M:%S']
                    for formato in formatos:
                        try:
                            fecha_parseada = datetime.strptime(fecha_csv, formato)
                            # Solo actualizar si la fecha actual es muy reciente (creada automáticamente)
                            if victima.fecha_registro and (datetime.now().replace(tzinfo=None) - victima.fecha_registro.replace(tzinfo=None)).days < 7:
                                victima.fecha_registro = fecha_parseada
                                actualizado = True
                            break
                        except ValueError:
                            continue
                except Exception as e:
                    print(f"Error parseando fecha '{fecha_csv}' para víctima {victima.id}: {e}")
        
        # 8. Asegurar que tenga estado
        if not victima.estado:
            victima.estado = 'ACTIVO'
            actualizado = True
        
        # 9. Migrar ubicación/lugar de hechos desde tiempo_modo_lugar
        if victima.tiempo_modo_lugar and not victima.lugar_hechos:
            tiempo_modo_lugar = victima.tiempo_modo_lugar.strip()
            if tiempo_modo_lugar and tiempo_modo_lugar != 'NA':
                # Tomar los primeros 500 caracteres para lugar_hechos
                victima.lugar_hechos = tiempo_modo_lugar[:500]
                actualizado = True
        
        if actualizado:
            try:
                victima.save()
                victimas_actualizadas += 1
                if victimas_actualizadas % 100 == 0:
                    print(f"Migradas {victimas_actualizadas} víctimas...")
            except Exception as e:
                print(f"Error guardando víctima {victima.id}: {e}")
    
    print(f"Migración completada. {victimas_actualizadas} víctimas actualizadas.")

def revertir_migracion(apps, schema_editor):
    """
    Función de reversión (vacía - no se puede revertir automáticamente)
    """
    print("ADVERTENCIA: Esta migración no se puede revertir automáticamente.")
    print("Los datos migrados permanecerán en los campos estándar.")

class Migration(migrations.Migration):

    dependencies = [
        ('padron_victimas', '0010_victima_numero_orden'),
    ]

    operations = [
        migrations.RunPython(
            migrar_datos_csv_a_campos_estandar,
            revertir_migracion,
        ),
    ]
